/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description  : Check the Plan for Unsubscribing to a channel
 * Expected Res : Success
 * Date         : Mar 2015
 */

drop dataverse channels3 if exists;
create dataverse channels3;
use channels3;

create type TweetMessageTypeuuid as closed {
  tweetid: uuid,
  sender_location: point,
  send_time: datetime,
  referred_topics: {{ string }},
  message_text: string,
  countA: int32,
  countB: int32
}


create dataset TweetMessageuuids(TweetMessageTypeuuid)
primary key tweetid autogenerated;

create function NearbyTweetsContainingText(place, text) {
  (select m.message_text
  from TweetMessageuuids m
  where contains(m.message_text,text)
  and spatial_intersect(m.sender_location, place))
};

create repetitive channel nearbyTweetChannel using NearbyTweetsContainingText@2 period duration("PT10M");

write output to nc1:"rttest/channel-unsubscribe.sqlpp";

unsubscribe "c45ef6d0-c5ae-4b9e-b5da-cf1932718296" from nearbyTweetChannel;
