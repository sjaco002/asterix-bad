/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
* Description  : Drop Channel Test. Check Metadata
* Expected Res : Success
* Date         : March 2015
* Author       : Steven Jacobs
*/

drop dataverse channels if exists;
create dataverse channels;
use channels;

create type TweetMessageTypeuuid as closed {
  tweetid: uuid,
  sender-location: point,
  send-time: datetime,
  referred-topics: {{ string }},
  message-text: string,
  countA: int32,
  countB: int32
}


create dataset TweetMessageuuids(TweetMessageTypeuuid)
primary key tweetid autogenerated;

create function NearbyTweetsContainingText($location, $text) {
  for $tweet in dataset TweetMessageuuids
  let $circle := create-circle($location,30.0)
  where contains($tweet.message-text,$text)
  and spatial-intersect($tweet.sender-location, $location)
  return $tweet.message-text
};

create repetitive channel nearbyTweetChannel1 using NearbyTweetsContainingText@2 period duration("PT10M");

create repetitive channel nearbyTweetChannel2 using NearbyTweetsContainingText@2 period duration("PT10M");

create repetitive channel nearbyTweetChannel3 using NearbyTweetsContainingText@2 period duration("PT10M");
